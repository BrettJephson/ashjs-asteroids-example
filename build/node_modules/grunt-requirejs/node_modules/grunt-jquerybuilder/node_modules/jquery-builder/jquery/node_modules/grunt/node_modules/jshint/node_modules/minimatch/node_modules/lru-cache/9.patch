From 593ed6bd3484411c1b7292772ff3601f4b4f71bd Mon Sep 17 00:00:00 2001
From: Jesse Dailey <jesse.dailey@gmail.com>
Date: Mon, 27 Aug 2012 12:10:06 -0400
Subject: [PATCH 1/2] performance improvement to lruWalk

---
 lib/lru-cache.js |    3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/lib/lru-cache.js b/lib/lru-cache.js
index 27a9a5e..ee3087d 100644
--- a/lib/lru-cache.js
+++ b/lib/lru-cache.js
@@ -172,7 +172,8 @@ function LRUCache (options) {
 
   function lruWalk () {
     // lru has been deleted, hop up to the next hit.
-    lru = Object.keys(lruList)[0]
+    for( var key in lruList )
+      return key;
   }
 
   function trim () {
-- 
1.7.10


From 04a63f84281ba55eed54f9656620f6954b27495f Mon Sep 17 00:00:00 2001
From: Jesse Dailey <jesse.dailey@gmail.com>
Date: Tue, 4 Sep 2012 10:49:09 -0400
Subject: [PATCH 2/2] remove lruWalk() and lru; replay lruWalk() improvements
 inside trim()

---
 lib/lru-cache.js |   22 +++++-----------------
 1 file changed, 5 insertions(+), 17 deletions(-)

diff --git a/lib/lru-cache.js b/lib/lru-cache.js
index 12729de..33b40e8 100644
--- a/lib/lru-cache.js
+++ b/lib/lru-cache.js
@@ -42,7 +42,6 @@ function LRUCache (options) {
 
   var cache = {} // hash of items by key
     , lruList = {} // list of items in order of use recency
-    , lru = 0 // least recently used
     , mru = 0 // most recently used
     , length = 0 // number of items in the list
     , itemCount = 0
@@ -104,7 +103,6 @@ function LRUCache (options) {
     }
     cache = {}
     lruList = {}
-    lru = 0
     mru = 0
     length = 0
     itemCount = 0
@@ -153,7 +151,6 @@ function LRUCache (options) {
       return
     }
     delete lruList[hit.lu]
-    if (hit.lu === lru) lruWalk()
     hit.lu = mru ++
     lruList[hit.lu] = hit
     return hit.value
@@ -165,30 +162,21 @@ function LRUCache (options) {
     if (dispose) dispose(key, hit.value)
     delete cache[key]
     delete lruList[hit.lu]
-    if (hit.lu === lru) lruWalk()
     length -= hit.length
     itemCount --
   }
 
-  function lruWalk () {
-    // lru has been deleted, hop up to the next hit.
-    for (var key in lruList) {
-      return key
-    }
-  }
-
   function trim () {
     if (length <= max) return
-    var prune = Object.keys(lruList)
-    for (var i = 0; i < prune.length && length > max; i ++) {
-      var hit = lruList[prune[i]]
+    for (var k in lruList) {
+      if (length <= max) break;
+      if (!hOP(lruList, k)) continue; // protect against wild savages
+      var hit = lruList[k]
       if (dispose) dispose(hit.key, hit.value)
       length -= hit.length
       delete cache[ hit.key ]
-      delete lruList[prune[i]]
+      delete lruList[k]
     }
-
-    lruWalk()
   }
 }
 
-- 
1.7.10

